#!/bin/bash
#
# uncenz-1st -- first phase, screencasting and packet capturing
#
# Copyright (C) 2015 Miroslav Rovis, <http://www.CroatiaFidelis.hr/>
#
# released under BSD license, see LICENSE, or assume general BSD license,
# meaning you can do basically anything with these scripts except claim that
# you wrote them
#
# Uncenz is a set scripts for my method of engaging against censorship by
# documenting it to be able to call public or institutional attention, as well
# as discovering and documenting intrusion/other attacks to be able to seek
# help.

# The latter is related to the censorship issue since regimatic censorship is
# often accompanied with an array of possible attacks deliberate by same or
# related parties or purposefully allowed from non-related parties via sly
# means. All those possible attacks are intentional or allowed by the powerful
# subjects on the poor user, such as his/her own provider or possibly beyond.
#
# See topic:
#
# "Postfix smtp/TLS, Backup/Cloning Method, and Documenting
# Censorship/Intrusion"
# http://forums.gentoo.org/viewtopic-t-999436.html
#
# on Gentoo Forums.
#
# This is the first phase of my method. We try and start the screencast
# capturing with FFmpeg and dumpcamp'ing with dumpcap.
#
# This line takes your hostname and retains only the first three letters to use
# in the infix

# First of all, I don't go online if I don't capture traffic (and screencast,
# so: if I don't start this script first in other words), and I can't capture
# traffic if the $SSLKEYLOGFILE is not in place, so:
if [ ! -e "$SSLKEYLOGFILE" ]; then
	echo "There is no $SSLKEYLOGFILE. Fix that before you go online!"
    exit 0
fi

hostname_sh=$(hostname|sed 's/\(...\).*/\1/')
echo "\$hostname_sh: "; echo $hostname_sh
read FAKE
#
# We must not start ffmpeg nor dumpcap if another session is running.
#
ffpidof=$(pidof ffmpeg)
echo "\$ffpidof: "; echo $ffpidof
ffpid=$(sudo -s ps aux | egrep 'ffmpeg' | grep x11grab | awk '{ print $2}')
echo "\$ffpid: "; echo $ffpid
dupidof=$(pidof dumpcap)
echo "\$dupidof: "; echo $dupidof
read FAKE
# In case you have a different display, surely you need to change this. Just,
# currently I want to try and get this script to work for me on the display I
# use on my box for online. No time here to make this work for other
# displays/display settings.
#
if [ -z "$ffpid" ] && [ -z "$dupidof" ] ; then
# We'll be launching uncenz-ts . But for uncenz-ts to run properly it need to
# be able to kill the process of the main script, this uncenz-1st one.
# Is it "$?"? I think so.
ps aux | grep [u]ncenz-1st | awk '{ print $2 }' >  .uncenz-1st.pid
echo "cat .uncenz-1st.pid"; cat .uncenz-1st.pid
read FAKE
#
# This uncenz-1st script needs to start ffmpeg screencasting and immediately
# afterward network packet capturing. The two files that it will produce with
# those processes that it will start, it needs to name with the same infix, and
# so the first thing to run is actually the uncenz-ts:
#
uncenz-ts
#
# This stows the name to use in a file .uncenz-ts (ts is for "time stamp"), such
# as "150207_0636" for 2015-02-06 06:36.
#
	tail -1 $SSLKEYLOGFILE > ~/SSLLAST_$(cat .uncenz-ts)_${hostname_sh}.txt
	echo stored ~/SSLLAST_$(cat .uncenz-ts)_${hostname_sh}.txt ..
	chmod 600 ~/SSLLAST_$(cat .uncenz-ts)_${hostname_sh}.txt
read FAKE
#	ffmpeg -f x11grab -nostdin -loglevel quiet -s 1366x768 -r 25 -i :0.0 \
#		-c:v libx264 -preset ultrafast -threads 0 \
#		Screen_$(cat .uncenz-ts)_${hostname_sh}.mkv &
#
#	ffmpeg -f x11grab -nostdin -loglevel quiet -s 1024x768 -r 25 -i :1.0 \
#		-c:v libx264 -preset ultrafast -threads 0 \
#		Screen_$(cat .uncenz-ts)_${hostname_sh}.mkv &
#
#	echo "Monitor screen 1024x768, take notice!"; sleep 1.5
#
	ffmpeg -f x11grab -nostdin -loglevel quiet -s 800x600 -r 25 -i :1.0 \
		-c:v libx264 -preset ultrafast -threads 0 \
		Screen_$(cat .uncenz-ts)_${hostname_sh}.mkv &
	
	echo "Monitor screen 800x600, take notice!"; sleep 1.5

	sudo -s touch dump_$(cat .uncenz-ts)_${hostname_sh}.pcap
#
# When I have issues with configuring network (such as setting up bridges)
# I like to take the state of the network when I'm online before I disconnect
# (this is not to be taken every time by default, it's a lot of output)
#	echo
#	echo "the iptables, and the link layer conf states"
#	echo "        will be taken in 30 sec             "
#	echo "sleep 30 &&  sudo -s uncenz-ipt_conf_states.sh &"
#	sleep 30 &&  sudo -s uncenz-ipt_conf_states.sh &
#	sleep 1.5
	echo
# These are my settings below. Only one line starting with "sudo -s dumpcap -i
# any ..." is allowed. The longest one, with lots of carrying on to next line
# (with '\') is when I want to rsync my local Gentoo mirror. A Gentoo user in
# Europe with a local mirror could use that.
# files.devuan.org :
#	sudo -s dumpcap -i any -f "host not 104.236.249.173" \
#	-w dump_$(cat .uncenz-ts)_${hostname_sh}.pcap &
#	sudo -s dumpcap -i any -f "host not 195.20.242.90 and not 194.8.197.22" \
#	-w dump_$(cat .uncenz-ts)_${hostname_sh}.pcap &
#	sudo -s dumpcap -i any -f "host not 195.20.242.90 and not 217.72.206.21 \
#	and not 194.8.197.22 and not 178.218.164.164" \
#	-w dump_$(cat .uncenz-ts)_${hostname_sh}.pcap &
#	sudo -s dumpcap -i any -f "host not 129.143.116.10 and not \
#	178.218.164.164" -w dump_$(cat .uncenz-ts)_${hostname_sh}.pcap &
#	sudo -s dumpcap -i any -f "host not 137.226.34.227 and not \
#	195.20.242.90 and not 217.72.206.21 and not 194.8.197.22 and not \
#	129.143.116.10 and not 178.218.164.164" -w \
#	dump_$(cat .uncenz-ts)_${hostname_sh}.pcap &
#	echo "Some hosts are filtered and not traced, take notice!"; sleep 1.5
#	sudo -s dumpcap -i any -f "host not 137.226.34.227 \
#	and not 195.20.242.90 \
#	and not 217.72.206.21 \
#	and not 194.8.197.22 \
#	and not 129.143.116.10 \
#	and not 208.70.246.16 \
#	and not 147.251.48.205 \
#	and not 86.49.49.49 \
#	and not 137.226.34.46 \
#	and not 62.93.32.21 \
#	and not 212.219.56.184 \
#	and not 178.218.164.164" -w dump_$(cat .uncenz-ts)_${hostname_sh}.pcap &
#	echo "Gentoo mirror rsync hosts are filtered and not traced,"
#	echo "				take notice!"; sleep 1.5
	sudo -s dumpcap -i any -w dump_$(cat .uncenz-ts)_${hostname_sh}.pcap &
	echo "No hosts are filtered, all are traced, take notice!"; sleep 1.5
else
	echo "An ffmpeg process is running, but is it uncenz's? Look up:" ; echo
	ls -ltr | tail -4 ; sleep 2 ; echo
	ls -ltr | tail -4 ; sleep 1
fi
# We need to find the pid of each of the above processes (I'm really new to
# this).
ffpid=$(sudo -s ps aux | egrep 'ffmpeg' | grep x11grab | awk '{ print $2}')
dupid=$(sudo -s ps aux | egrep '[d]umpcap' | awk '{ print $2}')

#ffpid=$(ps aux | egrep 'ffmpeg' | grep x11grab | awk '{ print $2}')
#dupid=$(ps aux | egrep '[d]umpcap' | awk '{ print $2}')

echo \$ffpid is: # ff for ffmpeg
echo $ffpid
echo \$dupid is: # du for dumpcap
echo $dupid

#echo "Issue (paste from this stdout, literally):"
#echo "sudo -s kill $dupid $ffpid"
#echo "sudo -s kill $dupid ; sudo -s kill $ffpid"
#echo "to end this session."
#echo $dupid > /var/run/dumpcap-uncenz.pid
#echo "cat /var/run/dumpcap-uncenz.pid"
#cat /var/run/dumpcap-uncenz.pid
#read FAKE
#echo $ffpid > /var/run/ffmpeg-uncenz.pid
#echo "cat /var/run/ffmpeg-uncenz.pid"
#cat /var/run/ffmpeg-uncenz.pid
#read FAKE
#cat $(which uncenz-kill)
#cat /usr/local/bin/uncenz-kill
echo "To end a session issue \"uncenz-kill <Enter>\" from its terminal."

exit 0
