#!/bin/bash
#
# uncenz-1st -- first phase, screencasting and packet capturing
#
# this script is part the uncenz set of scripts:
# https://github.com/miroR/uncenz
#
# Copyright (C) 2015 Miroslav Rovis, <http://www.CroatiaFidelis.hr/>
#
# released under BSD license, pls. see LICENSE
#
# This is the first phase of my method. We try and start the screencast
# capturing with FFmpeg and tracing with dumpcap/tcpdump.
#
function ask()
{
    echo -n "$@" '[y/n] ' ; read ans
    case "$ans" in
        y*|Y*) return 0 ;;
        *) return 1 ;;
    esac
}
# If you don't want to reply to this question below every time, you can set
# either the string "dumpcap" or "tcpdump", no spaces, not extra char, just the
# usual newline at end, into:
# .uncenz-dumper_permanent
if [ -e ".uncenz-dumper_permanent" ]; then
	dumper=$(cat .uncenz-dumper_permanent)
	if [ "$dumper" == "dumpcap" ] || [ "$dumper" == "tcpdump" ]; then
		echo "\$dumper: $dumper, from your permanent setting";
		echo $dumper > .uncenz-dumper
	else
		echo "The string in the .uncenz-dumper_permanent is not one of"
		echo "the options this program is able to take, maybe a typo?"
	fi
	read FAKE
else
	echo "Can use Wireshark's dumpcap, or Tcpdump Team's tcpdump, you choose!"
	echo "\"d\" for dumpcap"
	echo "\"t\" for tcpdump"
	read choice
	case $choice in
		"d")
			dumper=dumpcap
		;;
	
		"t")
			dumper=tcpdump
		;;

		* )
			echo "only btwn dumpcap and tcpdump can you choose, at this time"
			echo "Pls. Ctrl-C, and make the correct/possible choice."
			exit
		;;
	esac
	echo \$dumper: $dumper
	echo $dumper > .uncenz-dumper
read FAKE
fi
function show_help {
	echo
	echo "==============================================================="
	echo
	echo "$0 -- first phase of uncenz,"
	echo "starting screencasting and packet capturing"
	echo
	echo "Usage: $0 <an-include-script-with-capture-filters> <another-one>"
	echo "Or even:"
	echo "$0 "" <another-one>"
	echo "(to run, at end, just the other extra one)."
	echo ""
	echo "	Without arguments uncenz captures in promiscuous mode,"
	echo "	on all available interfaces."
	echo
	echo "	With first argument, an executable file \$include_filter_run,"
	echo "	it starts the $dumper with whatever its capture filter contains."
	echo "	\$include_filter_run is named with no spaces, and resides"
	echo "	where the $0 is regularly run from, usually in"
	echo "	/usr/local/bin (still hardwired, at this time)."
	echo
}

# First, the checks that apply to uncenz-1st run with and without the include
# alike.
#
# First of all, I don't go online if I don't capture traffic (and screencast),
# so: if I don't start this script first in other words), and I can't capture
# traffic if the $SSLKEYLOGFILE is not in place, so:
if [ ! -e "$SSLKEYLOGFILE" ]; then
	echo "There is no $SSLKEYLOGFILE. Fix that before you go online!"
	exit 0
fi

# Previously, I would move my real ~/.gnupg dir, the ones with all the
# secret key(s), offline before connecting and substituted it with one with
# only public keys. Recently I learned to offline secret keys.
#
# I really could:
# FILE=.gnupg-sec
# gpg --list-secret-keys --with-colon > $FILE
# but below is better.
#
# $f should be empty, for tranquil longer time browsing online.
f=$(gpg --list-secret-keys --with-colon)
if [ "$f" != "" ]; then
	# see:
	# Safe GnuPG setup (with offlined master secret key)
	# https://dev1galaxy.org/viewtopic.php?id=1929
	# too ugly:
	#echo $f
	gpg --list-secret-keys --with-colons | grep '^sec\>' | awk -F: '{print $15}'
	col15=$(gpg --list-secret-keys --with-colons | grep '^sec\>' | awk -F: '{print $15}')
	if [ "$col15" == "#" ]; then
		echo "You have offlined the primary secret key. Probably fine to proceed."
	else
		gpg --list-secret-keys --with-colons | grep '^sec\>' | awk -F: '{print $15}'
		# Check how many keys are not offlined
		num_keys=$(gpg --list-secret-keys --with-colons | grep '^sec\>' | awk -F: '{print $15}'|wc -l)
		ord_key=0
		while [ "$ord_key" -lt "$num_keys" ] ; do
			echo
			ord_key_plus=$(echo $ord_key + 1 | bc)
			col15_each=$(gpg --list-secret-keys --with-colons | grep '^sec\>' | awk -F: '{print $15}'| head -${ord_key_plus} | tail -1)
			if [ "$col15_each" == "#" ]; then
				echo "You have offlined the primary secret key of the iterated key. Pass for this one."
			else 
				if [ "$col15_each" == "+" ]; then
					if [ -e ".uncenz-keys_allow" ]; then
						key_sha=$(gpg --list-secret-keys --with-colons | grep '^sec\>' | awk -F: '{print $5}'| head -${ord_key_plus} | tail -1| sha256sum - | cut -d' ' -f1)
						grep $key_sha .uncenz-keys_allow
						if ( grep $key_sha .uncenz-keys_allow ); then
							echo "This key is allowed unofflined by user's configuration"
						else
							aplay -q ~/tvtube.wav
							echo "Put the SHA256 (the 64 hex string above) of the 5th column"
							echo "of the gpg command used (see script) of this  key in"
							echo ".uncenz-keys_allow in this dir if you want to"
							echo "allow it unofflined and avoid this nagging"
						
							echo "This key has not been allowed by your configuration for going online."
							echo "It may be at risk from possible intrusion techniques."
							echo "Continue regardless (y), or exit and fix this"
							echo "key's primary secret key availability in .gnupg/?"
							echo
							ask;
							# the default (just hitting Enter) is exiting
							if [ "$?" == 1 ]; then
								echo "Primary secret key is not offlined, exiting by user's choice."
								exit 0
							fi
						fi
					else
						aplay -q ~/tvtube.wav
						echo "Put the SHA256 (the 64 hex string above) of the 5th column"
						echo "of the gpg command used (see script) of this  key in"
						echo ".uncenz-keys_allow in this dir if you want to"
						echo "allow it unofflined and avoid this nagging."
					
						echo "This key is has not been allowed by your configuration for going online."
						echo "It may be at risk from possible intrusion techniques."
						echo "Continue regardless (y), or exit and"
						echo "fix this key's primary secret key availability in .gnupg/?"
						echo
						ask;
						# the default (just hitting Enter) is exiting
						if [ "$?" == 1 ]; then
							echo "Primary secret key is not offlined, exiting by user's choice."
							exit 0
						fi
					fi
				fi
			fi
			ord_key=$(echo $ord_key + 1 | bc)
			#echo \$ord_key: $ord_key
		done
	fi
fi
#read FAKE
#echo
rm .gradm-S
sudo -s gradm -S > .gradm-S
gradm_S=$(cat .gradm-S)
if [ "$gradm_S" == "The RBAC system is currently disabled." ]; then
	echo "#####"
	echo "$gradm_S"
	echo
	echo " Do you really want to go online with Gradm disabled? "
	echo
	aplay -q ~/tvtube.wav
	echo
	echo "Disconnect, then Ctrl-C, and run uncenz-kill"
	echo "and then enable Gradm, or..."
	echo
	echo "... or hit Enter to continue."
	echo
	read FAKE
	echo
	echo "#####"
fi

# This line takes your hostname and retains only the first three letters to use
# in the infix
hostname_sh=$(hostname|sed 's/\(...\).*/\1/')
echo "\$hostname_sh: "; echo $hostname_sh
read FAKE
#
# We must not start ffmpeg nor dumpcap/tcpdump if another session is running.
#
ffpidof=$(pidof ffmpeg)
echo "\$ffpidof: "; echo $ffpidof
ffpid=$(sudo -s ps aux | egrep 'ffmpeg' | grep -v grep | grep x11grab | awk '{ print $2}')
echo "\$ffpid: "; echo $ffpid
dupidof=$(pidof $dumper)
echo "\$dupidof: "; echo $dupidof
#read FAKE
# In case you have a different display, surely you need to change this. Just,
# currently I want to try and get this script to work for me on the display I
# use on my box for online. No time here to make this work for other
# displays/display settings.
#
if [ -z "$ffpid" ] && [ -z "$dupidof" ] ; then
	# We'll be launching uncenz-ts . But for uncenz-ts to run properly it need to
	# be able to kill the process of the main script, this uncenz-1st one.
	ps aux | grep [u]ncenz-1st | grep -v grep | awk '{ print $2 }' >  .uncenz-1st.pid
	echo "cat .uncenz-1st.pid"; cat .uncenz-1st.pid
	#read FAKE
	#
	# This uncenz-1st script needs to start ffmpeg screencasting and immediately
	# afterward network packet capturing. The two files that it will produce with
	# those processes that it will start, it needs to name with the same infix, and
	# so the first thing to run is actually the uncenz-ts:
	#
	uncenz-ts
	#
	# This stows the name to use in a file .uncenz-ts (ts is for "time stamp"), such
	# as "150207_0636" for 2015-02-06 06:36.
	#
	# Pretty dirty, but does it for me, this below is for the purpose that I
	# more easily find out if Palemoon (or Firefox), if active, is still
	# logging SSL-keys. It will just compare the previous SSLLAST to the new
	# just taken, by their hashes, and tell me to decide if they shouldn't
	# differ, if they do.
	tail -1 $SSLKEYLOGFILE > ~/SSLLAST_$(cat .uncenz-ts)_${hostname_sh}.txt
	echo stored ~/SSLLAST_$(cat .uncenz-ts)_${hostname_sh}.txt ...
	chmod 600 ~/SSLLAST_$(cat .uncenz-ts)_${hostname_sh}.txt
	ls -l ~/SSLLAST_$(cat .uncenz-ts.old)_${hostname_sh}.txt \
		~/SSLLAST_$(cat .uncenz-ts)_${hostname_sh}.txt
		ssllast_hash=$(sha256sum \
			~/SSLLAST_$(cat .uncenz-ts)_${hostname_sh}.txt|cut -d' ' -f1)
		ssllast_hash_old=$(sha256sum \
			~/SSLLAST_$(cat .uncenz-ts.old)_${hostname_sh}.txt|cut -d' ' -f1)
		echo \$ssllast_hash, then \$ssllast_hash_old:
		echo $ssllast_hash
		echo $ssllast_hash_old
	if [ "$ssllast_hash" == "$ssllast_hash_old" ]; then
		echo
		echo "#####"
		echo
		echo " The last key is the same as at the start of last session "
		echo
		echo " If \$SSLKEYLOGFILE enable browser was active in the last session"
		echo " and opened https pages, it may have malfunctioned. "
		echo
		echo "							^^^	  ^^^^^^^^^^^^^ "
		aplay -q ~/tvtube.wav
		echo
		echo "Disconnect, then run uncenz-kill, and then Ctrl-C and investigate,"
		echo "or hit Enter to continue."
		echo "(If no SSL-key logging browser was active, all may still be fine.)"
		echo
		read FAKE
		echo
		echo "#####"
	fi

	# Still not in the clear about the below, but I think that both dumpcap and
	# tcpdump use pcapng even if you don't give them that extenstion. And...
	# And, I think for dumpcap, if it is not set to capture as <you, the normal
	# user> (still so here, was lazy about that... well, in grsecurity-hardened
	# system the root is not much more powerful than a normal user, so...), the
	# $the_dump needs to be touch'd.
	# Likewise for tcpdump, if it is not set to capture as <you, the normal
	# user>, which in my Gentoo machine means compiled with (the default)
	# "drop-root" use flag. [Note while preparing v0.40: I've been running
	# Devuan only for almost one year now. Reports how this works for Gentoo
	# would be appreciated.]
	the_dump=dump_$(cat .uncenz-ts)_${hostname_sh}.pcap
	#the_dump_real=dump_$(cat .uncenz-ts)_${hostname_sh}.pcap
	export the_dump
	if [ "$dumper" == "dumpcap" ]; then
		sudo -s touch $the_dump
	fi
	if [ "$dumper" == "tcpdump" ]; then
		sudo -s touch $the_dump
		sudo -s chown tcpdump:tcpdump $the_dump
	fi
	#
	## When I have issues with configuring network (such as setting up bridges)
	## I like to take the state of the network when I'm online before I disconnect
	## (this is not to be taken every time by default, it's a lot, like debugging)
	#	echo
	#	echo "the iptables, and the link layer conf states"
	#	echo "		will be taken in 30 sec			 "
	#	echo "sleep 30 &&  sudo -s uncenz-ipt-conf-states.sh &"
	#	sleep 30 &&  sudo -s uncenz-ipt-conf-states.sh &
	#	sleep 1.5
	#	echo
	#
        
	#
	# Only one line starting with "sudo -s $dumper -i any ..." is allowed, of course.
	#
	if [ "$1" ] && [ -n "$1" ]; then
		include_filter_run=$1
		echo \$include_filter_run: $include_filter_run
		if [ -e "/usr/local/bin/$include_filter_run" ] && [ -x "/usr/local/bin/$include_filter_run" ]; then 
				/usr/local/bin/$include_filter_run
			else
				echo "The include script you gave:"
				echo "$include_filter_run"
				echo "does not exist, or is not in the /usr/local/bin/ directory,"
				echo "or is not executable"
				sleep 3
				show_help
				exit 0
		fi
	else
		if [ "$dumper" == "dumpcap" ]; then
			sudo -s $dumper -i any -w $the_dump &
		fi
		if [ "$dumper" == "tcpdump" ]; then
			# For "-Z tcpdump" option, in Devuan/Debian based systems,
			# tcpdump system user/group needs to be created, maybe:
			# "adduser --system --group --no-create-home tcpdump"
			sudo -s $dumper -i any -Z tcpdump -U -v -w $the_dump &
		fi
		#sudo -s $dumper -i any -w $the_dump &
		echo "No hosts are filtered, all are traced, take notice!"; sleep 0.2
		#echo $the_dump_real
		#if [ -e "$the_dump" ]; then
		#	echo "Renaming $the_dump to $the_dump_real, is not pcapng an overkill extension?"
		#	mv -iv $the_dump $the_dump_real
		#fi		
	fi

	ffmpeg -f x11grab -nostdin -loglevel quiet -s 1366x768 -r 10 -i :0.0 \
		-c:v libx264 -preset ultrafast -threads 0 \
		Screen_$(cat .uncenz-ts)_${hostname_sh}.mkv &
	
	echo "Monitor screen 1366x768, take notice!"; sleep 0.5
	read FAKE

else
	echo "An ffmpeg process is running, but is it uncenz's? Look up:" ; echo
	ls -ltr | tail -4 ; sleep 2 ; echo
	ls -ltr | tail -4 ; sleep 1
fi

# A sample modification:
#	ffmpeg -f x11grab -nostdin -loglevel quiet -s 800x600 -r 10 -i :1.0 \
#		-c:v libx264 -preset ultrafast -threads 0 \
#		Screen_$(cat .uncenz-ts)_${hostname_sh}.mkv &
#
#	echo "Monitor screen 800x600, take notice!"; sleep 1.5
#
# We need to find the pid of each of the above processes.
ffpid=$(sudo -s ps aux | egrep 'ffmpeg' | grep -v grep | grep x11grab | awk '{ print $2}')
if [ "$dumper" == "dumpcap" ]; then
	dupid=`sudo -s ps aux | egrep '[d]umpcap' | grep -v grep | awk '{ print $2}'`
fi
if [ "$dumper" == "tcpdump" ]; then
	dupid=`sudo -s ps aux | egrep '[t]cpdump' | grep -v grep | awk '{ print $2}'`
fi

echo \$ffpid is: # ff for ffmpeg
echo $ffpid
# Note that if $dumper is tcpdump you get two pids, because it shows as two
# processes, one owned by sudo, the other by user tcpdump
# I've been using only tcpdump since months now. Reports for dumpcap as $dumper
# welcome.
echo \$dupid is: # du for $dumper
echo $dupid

# In my grsec-hardened Devuan (the embattled
# https://github.com/minipli/linux-unofficial_grsec/ of uncertain future, and
# so is the security of GNU/Linux because of it, thanks to the stinking Schmoog
# who succeeded to become the sole ponsor --the spies that they are-- of, hear
# me well: Linux security, namely spender and PaX Team gave up after all the
# ripping of their code under the underhanded schemes of the aforementioned)
# [In my grsec-hardened Devuan], and it is, in essence, Debian corrected for
# systemd intrusion, the log file into which rsyslog logs all the grsec
# exec_logging and audit_chdir for me is /var/log/kern.log. During my years
# with Gentoo it used to be /var/log/messages. Edit according to where you get
# the logging.
sudo -s tail -1 /var/log/kern.log
sudo -s tail -1 /var/log/kern.log|cut -d\[ -f2|cut -d] -f1
# 'str0' stands for 'string 0', i.e. from where in the log we will later, at
# termination of this session, grep out the excerpt of the log.
str0=$(sudo -s tail -1 /var/log/kern.log|cut -d\[ -f2|cut -d] -f1)
echo \$str0: $str0
# I've learned to use mktemp a little in the meantime, but not yet so well, and
# it's too many changes needed. Only uncenz-2nd uses mktemp at this time...
echo $str0 > .uncenz-log_str0
cat .uncenz-log_str0
read FAKE
echo "To end a session issue \"uncenz-kill <Enter>\" from its terminal."

# An/more logging/other include(s) might be added here. I'll tie it to $2
# (ermh, for now).  Pls. note that if you give empty string for $1 arg, then
# you can easily/effectively get a $2 <another-include> to be run Like:
# uncenz-1st "" <another-include>
# That other script must also reside in /usr/local/bin and other conditions.
# See the include with $1 above.
# Also note that this will silently just be ignored if any of the conditions do
# not hold.
if [ "$2" ] && [ -n "$2" ]; then
	include_script_2=$2
	echo \$include_script_2: $include_script_2
	if [ -e "/usr/local/bin/$include_script_2" ] && [ -x "/usr/local/bin/$include_script_2" ]; then 
			/usr/local/bin/$include_script_2
		else
			echo "The include script you gave:"
			echo "$include_script_2"
			echo "does not exist, or is not in the /usr/local/bin/ directory,"
			echo "or is not executable"
			sleep 3
			show_help
			exit 0
	fi
# Uncomment 4 lines below if you're struggling to get this to work.
#else
#			echo "The include script you gave:"
#			echo "$include_script_2"
#			echo "has not been supplied on the command line, or is an empty string,"
fi
# I added a similar snippet in the uncenz-kill, without which this $2 include
# may not work (say if it's about extracting from another log).

exit 0
# vim: set tabstop=4 expandtab:
